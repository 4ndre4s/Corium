// File: InstructionInfoTable.hpp
// Author: Mario
// Created: 20.08.2021 2:40 PM
// Project: Corium
// 
//                                  Apache License
//                            Version 2.0, January 2004
//                         http://www.apache.org/licenses/
// 
//    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
// 
//    1. Definitions.
// 
//       "License" shall mean the terms and conditions for use, reproduction,
//       and distribution as defined by Sections 1 through 9 of this document.
// 
//       "Licensor" shall mean the copyright owner or entity authorized by
//       the copyright owner that is granting the License.
// 
//       "Legal Entity" shall mean the union of the acting entity and all
//       other entities that control, are controlled by, or are under common
//       control with that entity. For the purposes of this definition,
//       "control" means (i) the power, direct or indirect, to cause the
//       direction or management of such entity, whether by contract or
//       otherwise, or (ii) ownership of fifty percent (50%) or more of the
//       outstanding shares, or (iii) beneficial ownership of such entity.
// 
//       "You" (or "Your") shall mean an individual or Legal Entity
//       exercising permissions granted by this License.
// 
//       "Source" form shall mean the preferred form for making modifications,
//       including but not limited to software source code, documentation
//       source, and configuration files.
// 
//       "Object" form shall mean any form resulting from mechanical
//       transformation or translation of a Source form, including but
//       not limited to compiled object code, generated documentation,
//       and conversions to other media types.
// 
//       "Work" shall mean the work of authorship, whether in Source or
//       Object form, made available under the License, as indicated by a
//       copyright notice that is included in or attached to the work
//       (an example is provided in the Appendix below).
// 
//       "Derivative Works" shall mean any work, whether in Source or Object
//       form, that is based on (or derived from) the Work and for which the
//       editorial revisions, annotations, elaborations, or other modifications
//       represent, as a whole, an original work of authorship. For the purposes
//       of this License, Derivative Works shall not include works that remain
//       separable from, or merely link (or bind by name) to the interfaces of,
//       the Work and Derivative Works thereof.
// 
//       "Contribution" shall mean any work of authorship, including
//       the original version of the Work and any modifications or additions
//       to that Work or Derivative Works thereof, that is intentionally
//       submitted to Licensor for inclusion in the Work by the copyright owner
//       or by an individual or Legal Entity authorized to submit on behalf of
//       the copyright owner. For the purposes of this definition, "submitted"
//       means any form of electronic, verbal, or written communication sent
//       to the Licensor or its representatives, including but not limited to
//       communication on electronic mailing lists, source code control systems,
//       and issue tracking systems that are managed by, or on behalf of, the
//       Licensor for the purpose of discussing and improving the Work, but
//       excluding communication that is conspicuously marked or otherwise
//       designated in writing by the copyright owner as "Not a Contribution."
// 
//       "Contributor" shall mean Licensor and any individual or Legal Entity
//       on behalf of whom a Contribution has been received by Licensor and
//       subsequently incorporated within the Work.
// 
//    2. Grant of Copyright License. Subject to the terms and conditions of
//       this License, each Contributor hereby grants to You a perpetual,
//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//       copyright license to reproduce, prepare Derivative Works of,
//       publicly display, publicly perform, sublicense, and distribute the
//       Work and such Derivative Works in Source or Object form.
// 
//    3. Grant of Patent License. Subject to the terms and conditions of
//       this License, each Contributor hereby grants to You a perpetual,
//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//       (except as stated in this section) patent license to make, have made,
//       use, offer to sell, sell, import, and otherwise transfer the Work,
//       where such license applies only to those patent claims licensable
//       by such Contributor that are necessarily infringed by their
//       Contribution(s) alone or by combination of their Contribution(s)
//       with the Work to which such Contribution(s) was submitted. If You
//       institute patent litigation against any entity (including a
//       cross-claim or counterclaim in a lawsuit) alleging that the Work
//       or a Contribution incorporated within the Work constitutes direct
//       or contributory patent infringement, then any patent licenses
//       granted to You under this License for that Work shall terminate
//       as of the date such litigation is filed.
// 
//    4. Redistribution. You may reproduce and distribute copies of the
//       Work or Derivative Works thereof in any medium, with or without
//       modifications, and in Source or Object form, provided that You
//       meet the following conditions:
// 
//       (a) You must give any other recipients of the Work or
//           Derivative Works a copy of this License; and
// 
//       (b) You must cause any modified files to carry prominent notices
//           stating that You changed the files; and
// 
//       (c) You must retain, in the Source form of any Derivative Works
//           that You distribute, all copyright, patent, trademark, and
//           attribution notices from the Source form of the Work,
//           excluding those notices that do not pertain to any part of
//           the Derivative Works; and
// 
//       (d) If the Work includes a "NOTICE" text file as part of its
//           distribution, then any Derivative Works that You distribute must
//           include a readable copy of the attribution notices contained
//           within such NOTICE file, excluding those notices that do not
//           pertain to any part of the Derivative Works, in at least one
//           of the following places: within a NOTICE text file distributed
//           as part of the Derivative Works; within the Source form or
//           documentation, if provided along with the Derivative Works; or,
//           within a display generated by the Derivative Works, if and
//           wherever such third-party notices normally appear. The contents
//           of the NOTICE file are for informational purposes only and
//           do not modify the License. You may add Your own attribution
//           notices within Derivative Works that You distribute, alongside
//           or as an addendum to the NOTICE text from the Work, provided
//           that such additional attribution notices cannot be construed
//           as modifying the License.
// 
//       You may add Your own copyright statement to Your modifications and
//       may provide additional or different license terms and conditions
//       for use, reproduction, or distribution of Your modifications, or
//       for any such Derivative Works as a whole, provided Your use,
//       reproduction, and distribution of the Work otherwise complies with
//       the conditions stated in this License.
// 
//    5. Submission of Contributions. Unless You explicitly state otherwise,
//       any Contribution intentionally submitted for inclusion in the Work
//       by You to the Licensor shall be under the terms and conditions of
//       this License, without any additional terms or conditions.
//       Notwithstanding the above, nothing herein shall supersede or modify
//       the terms of any separate license agreement you may have executed
//       with Licensor regarding such Contributions.
// 
//    6. Trademarks. This License does not grant permission to use the trade
//       names, trademarks, service marks, or product names of the Licensor,
//       except as required for reasonable and customary use in describing the
//       origin of the Work and reproducing the content of the NOTICE file.
// 
//    7. Disclaimer of Warranty. Unless required by applicable law or
//       agreed to in writing, Licensor provides the Work (and each
//       Contributor provides its Contributions) on an "AS IS" BASIS,
//       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//       implied, including, without limitation, any warranties or conditions
//       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//       PARTICULAR PURPOSE. You are solely responsible for determining the
//       appropriateness of using or redistributing the Work and assume any
//       risks associated with Your exercise of permissions under this License.
// 
//    8. Limitation of Liability. In no event and under no legal theory,
//       whether in tort (including negligence), contract, or otherwise,
//       unless required by applicable law (such as deliberate and grossly
//       negligent acts) or agreed to in writing, shall any Contributor be
//       liable to You for damages, including any direct, indirect, special,
//       incidental, or consequential damages of any character arising as a
//       result of this License or out of the use or inability to use the
//       Work (including but not limited to damages for loss of goodwill,
//       work stoppage, computer failure or malfunction, or any and all
//       other commercial damages or losses), even if such Contributor
//       has been advised of the possibility of such damages.
// 
//    9. Accepting Warranty or Additional Liability. While redistributing
//       the Work or Derivative Works thereof, You may choose to offer,
//       and charge a fee for, acceptance of support, warranty, indemnity,
//       or other liability obligations and/or rights consistent with this
//       License. However, in accepting such obligations, You may act only
//       on Your own behalf and on Your sole responsibility, not on behalf
//       of any other Contributor, and only if You agree to indemnify,
//       defend, and hold each Contributor harmless for any liability
//       incurred by, or claims asserted against, such Contributor by reason
//       of your accepting any such warranty or additional liability.
// 
//    END OF TERMS AND CONDITIONS
// 
//    APPENDIX: How to apply the Apache License to your work.
// 
//       To apply the Apache License to your work, attach the following
//       boilerplate notice, with the fields enclosed by brackets "[]"
//       replaced with your own identifying information. (Don't include
//       the brackets!)  The text should be enclosed in the appropriate
//       comment syntax for the file format. We also recommend that a
//       file or class name and description of purpose be included on the
//       same "printed page" as the copyright notice for easier
//       identification within third-party archives.
// 
//    Copyright 2021 Mario Sieg "pinsrq" <mt3000@gmx.de>
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

#pragma once

#include <array>
#include <string_view>

#include "Instruction.hpp"

namespace Nominax::Assembler::X86_64
{
	/// <summary>
	/// Contains all instruction descriptions.
	/// </summary>
	constexpr std::array<const std::string_view, ToUnderlying(Instruction::Count_)> INSTRUCTION_INFO_TABLE
	{
        "add with carry",
        "unsigned integer addition of two operands with carry flag",
        "add",
        "add packed double-precision floating-point values",
        "add packed single-precision floating-point values",
        "add scalar double-precision floating-point values",
        "add scalar single-precision floating-point values",
        "packed double-fp add/subtract",
        "packed single-fp add/subtract",
        "unsigned integer addition of two operands with overflow flag",
        "perform one round of an aes decryption flow",
        "perform last round of an aes decryption flow",
        "perform one round of an aes encryption flow",
        "perform last round of an aes encryption flow",
        "perform the aes invmixcolumn transformation",
        "aes round key generation assist",
        "logical and",
        "logical and not",
        "bitwise logical and not of packed double-precision floating-point values",
        "bitwise logical and not of packed single-precision floating-point values",
        "bitwise logical and of packed double-precision floating-point values",
        "bitwise logical and of packed single-precision floating-point values",
        "bit field extract",
        "fill from lowest clear bit",
        "isolate lowest clear bit",
        "isolate lowest set bit and complement",
        "mask from lowest clear bit",
        "set lowest clear bit",
        "blend packed double precision floating-point values",
        "blend packed single precision floating-point values",
        "variable blend packed double precision floating-point values",
        "variable blend packed single precision floating-point values",
        "fill from lowest set bit",
        "isolate lowest set bit",
        "isolate lowest set bit and complement",
        "mask from lowest set bit",
        "reset lowest set bit",
        "bit scan forward",
        "bit scan reverse",
        "byte swap",
        "bit test",
        "bit test and complement",
        "bit test and reset",
        "bit test and set",
        "zero high bits starting with specified bit position",
        "call procedure",
        "convert byte to word",
        "convert doubleword to quadword",
        "convert doubleword to quadword",
        "clear carry flag",
        "clear direction flag",
        "flush cache line",
        "flush cache line optimized",
        "cache line write back",
        "zero-out 64-bit cache line",
        "complement carry flag",
        "move if above (cf == 0 and zf == 0)",
        "move if above or equal (cf == 0)",
        "move if below (cf == 1)",
        "move if below or equal (cf == 1 or zf == 1)",
        "move if carry (cf == 1)",
        "move if equal (zf == 1)",
        "move if greater (zf == 0 and sf == of)",
        "move if greater or equal (sf == of)",
        "move if less (sf != of)",
        "move if less or equal (zf == 1 or sf != of)",
        "move if not above (cf == 1 or zf == 1)",
        "move if not above or equal (cf == 1)",
        "move if not below (cf == 0)",
        "move if not below or equal (cf == 0 and zf == 0)",
        "move if not carry (cf == 0)",
        "move if not equal (zf == 0)",
        "move if not greater (zf == 1 or sf != of)",
        "move if not greater or equal (sf != of)",
        "move if not less (sf == of)",
        "move if not less or equal (zf == 0 and sf == of)",
        "move if not overflow (of == 0)",
        "move if not parity (pf == 0)",
        "move if not sign (sf == 0)",
        "move if not zero (zf == 0)",
        "move if overflow (of == 1)",
        "move if parity (pf == 1)",
        "move if parity even (pf == 1)",
        "move if parity odd (pf == 0)",
        "move if sign (sf == 1)",
        "move if zero (zf == 1)",
        "compare two operands",
        "compare packed double-precision floating-point values",
        "compare packed single-precision floating-point values",
        "compare scalar double-precision floating-point values",
        "compare scalar single-precision floating-point values",
        "compare and exchange",
        "compare and exchange 16 bytes",
        "compare and exchange 8 bytes",
        "compare scalar ordered double-precision floating-point values and set eflags",
        "compare scalar ordered single-precision floating-point values and set eflags",
        "cpu identification",
        "convert quadword to octaword",
        "accumulate crc32 value",
        "convert packed dword integers to packed double-precision fp values",
        "convert packed dword integers to packed single-precision fp values",
        "convert packed double-precision fp values to packed dword integers",
        "convert packed double-precision fp values to packed dword integers",
        "convert packed double-precision fp values to packed single-precision fp values",
        "convert packed dword integers to packed double-precision fp values",
        "convert packed dword integers to packed single-precision fp values",
        "convert packed single-precision fp values to packed dword integers",
        "convert packed single-precision fp values to packed double-precision fp values",
        "convert packed single-precision fp values to packed dword integers",
        "convert scalar double-precision fp value to integer",
        "convert scalar double-precision fp value to scalar single-precision fp value",
        "convert dword integer to scalar double-precision fp value",
        "convert dword integer to scalar single-precision fp value",
        "convert scalar single-precision fp value to scalar double-precision fp value",
        "convert scalar single-precision fp value to dword integer",
        "convert with truncation packed double-precision fp values to packed dword integers",
        "convert with truncation packed double-precision fp values to packed dword integers",
        "convert with truncation packed single-precision fp values to packed dword integers",
        "convert with truncation packed single-precision fp values to packed dword integers",
        "convert with truncation scalar double-precision fp value to signed integer",
        "convert with truncation scalar single-precision fp value to dword integer",
        "convert word to doubleword",
        "convert word to doubleword",
        "decrement by 1",
        "unsigned divide",
        "divide packed double-precision floating-point values",
        "divide packed single-precision floating-point values",
        "divide scalar double-precision floating-point values",
        "divide scalar single-precision floating-point values",
        "dot product of packed double precision floating-point values",
        "dot product of packed single precision floating-point values",
        "exit mmx state",
        "extract packed single precision floating-point value",
        "extract field",
        "fast exit multimedia state",
        "packed double-fp horizontal add",
        "packed single-fp horizontal add",
        "packed double-fp horizontal subtract",
        "packed single-fp horizontal subtract",
        "signed divide",
        "signed multiply",
        "increment by 1",
        "insert packed single precision floating-point value",
        "insert field",
        "call to interruptstatus procedure",
        "jump if above (cf == 0 and zf == 0)",
        "jump if above or equal (cf == 0)",
        "jump if below (cf == 1)",
        "jump if below or equal (cf == 1 or zf == 1)",
        "jump if carry (cf == 1)",
        "jump if equal (zf == 1)",
        "jump if ecx register is 0",
        "jump if greater (zf == 0 and sf == of)",
        "jump if greater or equal (sf == of)",
        "jump if less (sf != of)",
        "jump if less or equal (zf == 1 or sf != of)",
        "jump unconditionally",
        "jump if not above (cf == 1 or zf == 1)",
        "jump if not above or equal (cf == 1)",
        "jump if not below (cf == 0)",
        "jump if not below or equal (cf == 0 and zf == 0)",
        "jump if not carry (cf == 0)",
        "jump if not equal (zf == 0)",
        "jump if not greater (zf == 1 or sf != of)",
        "jump if not greater or equal (sf != of)",
        "jump if not less (sf == of)",
        "jump if not less or equal (zf == 0 and sf == of)",
        "jump if not overflow (of == 0)",
        "jump if not parity (pf == 0)",
        "jump if not sign (sf == 0)",
        "jump if not zero (zf == 0)",
        "jump if overflow (of == 1)",
        "jump if parity (pf == 1)",
        "jump if parity even (pf == 1)",
        "jump if parity odd (pf == 0)",
        "jump if rcx register is 0",
        "jump if sign (sf == 1)",
        "jump if zero (zf == 1)",
        "add two 8-bit masks",
        "add two 32-bit masks",
        "add two 64-bit masks",
        "add two 16-bit masks",
        "bitwise logical and 8-bit masks",
        "bitwise logical and 32-bit masks",
        "bitwise logical and not 8-bit masks",
        "bitwise logical and not 32-bit masks",
        "bitwise logical and not 64-bit masks",
        "bitwise logical and not 16-bit masks",
        "bitwise logical and 64-bit masks",
        "bitwise logical and 16-bit masks",
        "move 8-bit mask",
        "move 32-bit mask",
        "move 64-bit mask",
        "move 16-bit mask",
        "not 8-bit mask register",
        "not 32-bit mask register",
        "not 64-bit mask register",
        "not 16-bit mask register",
        "bitwise logical or 8-bit masks",
        "bitwise logical or 32-bit masks",
        "bitwise logical or 64-bit masks",
        "or 8-bit masks and set flags",
        "or 32-bit masks and set flags",
        "or 64-bit masks and set flags",
        "or 16-bit masks and set flags",
        "bitwise logical or 16-bit masks",
        "shift left 8-bit masks",
        "shift left 32-bit masks",
        "shift left 64-bit masks",
        "shift left 16-bit masks",
        "shift right 8-bit masks",
        "shift right 32-bit masks",
        "shift right 64-bit masks",
        "shift right 16-bit masks",
        "bit test 8-bit masks and set flags",
        "bit test 32-bit masks and set flags",
        "bit test 64-bit masks and set flags",
        "bit test 16-bit masks and set flags",
        "unpack and interleave 8-bit masks",
        "unpack and interleave 32-bit masks",
        "unpack and interleave 16-bit masks",
        "bitwise logical xnor 8-bit masks",
        "bitwise logical xnor 32-bit masks",
        "bitwise logical xnor 64-bit masks",
        "bitwise logical xnor 16-bit masks",
        "bitwise logical xor 8-bit masks",
        "bitwise logical xor 32-bit masks",
        "bitwise logical xor 64-bit masks",
        "bitwise logical xor 16-bit masks",
        "load unaligned integer 128 bits",
        "load mxcsr register",
        "load effective address",
        "load fence",
        "count the number of leading zero bits",
        "store selected bytes of double quadword",
        "store selected bytes of quadword",
        "return maximum packed double-precision floating-point values",
        "return maximum packed single-precision floating-point values",
        "return maximum scalar double-precision floating-point value",
        "return maximum scalar single-precision floating-point value",
        "memory fence",
        "return minimum packed double-precision floating-point values",
        "return minimum packed single-precision floating-point values",
        "return minimum scalar double-precision floating-point value",
        "return minimum scalar single-precision floating-point value",
        "monitor a linear address range",
        "monitor a linear address range with timeout",
        "move",
        "move aligned packed double-precision floating-point values",
        "move aligned packed single-precision floating-point values",
        "move data after swapping bytes",
        "move doubleword",
        "move one double-fp and duplicate",
        "move quadword from xmm to mmx technology register",
        "move aligned double quadword",
        "move unaligned double quadword",
        "move packed single-precision floating-point values high to low",
        "move high packed double-precision floating-point value",
        "move high packed single-precision floating-point values",
        "move packed single-precision floating-point values low to high",
        "move low packed double-precision floating-point value",
        "move low packed single-precision floating-point values",
        "extract packed double-precision floating-point sign mask",
        "extract packed single-precision floating-point sign mask",
        "store double quadword using non-temporal hint",
        "load double quadword non-temporal aligned hint",
        "store doubleword using non-temporal hint",
        "store packed double-precision floating-point values using non-temporal hint",
        "store packed single-precision floating-point values using non-temporal hint",
        "store of quadword using non-temporal hint",
        "store scalar double-precision floating-point values using non-temporal hint",
        "store scalar single-precision floating-point values using non-temporal hint",
        "move quadword",
        "move quadword from mmx technology to xmm register",
        "move scalar double-precision floating-point value",
        "move packed single-fp high and duplicate",
        "move packed single-fp low and duplicate",
        "move scalar single-precision floating-point values",
        "move with sign-extension",
        "move doubleword to quadword with sign-extension",
        "move unaligned packed double-precision floating-point values",
        "move unaligned packed single-precision floating-point values",
        "move with zero-extend",
        "compute multiple packed sums of absolute difference",
        "unsigned multiply",
        "multiply packed double-precision floating-point values",
        "multiply packed single-precision floating-point values",
        "multiply scalar double-precision floating-point values",
        "multiply scalar single-precision floating-point values",
        "unsigned multiply without affecting flags",
        "monitor wait",
        "monitor wait with timeout",
        "two's complement negation",
        "no operation",
        "one's complement negation",
        "logical inclusive or",
        "bitwise logical or of double-precision floating-point values",
        "bitwise logical or of single-precision floating-point values",
        "packed absolute value of byte integers",
        "packed absolute value of doubleword integers",
        "packed absolute value of word integers",
        "pack doublewords into words with signed saturation",
        "pack words into bytes with signed saturation",
        "pack doublewords into words with unsigned saturation",
        "pack words into bytes with unsigned saturation",
        "add packed byte integers",
        "add packed doubleword integers",
        "add packed quadword integers",
        "add packed signed byte integers with signed saturation",
        "add packed signed word integers with signed saturation",
        "add packed unsigned byte integers with unsigned saturation",
        "add packed unsigned word integers with unsigned saturation",
        "add packed word integers",
        "packed align right",
        "packed bitwise logical and",
        "packed bitwise logical and not",
        "spin loop hint",
        "average packed byte integers",
        "average packed byte integers",
        "average packed word integers",
        "variable blend packed bytes",
        "blend packed words",
        "carry-less quadword multiplication",
        "compare packed byte data for equality",
        "compare packed doubleword data for equality",
        "compare packed quadword data for equality",
        "compare packed word data for equality",
        "packed compare explicit length strings, return index",
        "packed compare explicit length strings, return mask",
        "compare packed signed byte integers for greater than",
        "compare packed signed doubleword integers for greater than",
        "compare packed data for greater than",
        "compare packed signed word integers for greater than",
        "packed compare implicit length strings, return index",
        "packed compare implicit length strings, return mask",
        "parallel bits deposit",
        "parallel bits extract",
        "extract byte",
        "extract doubleword",
        "extract quadword",
        "extract word",
        "packed floating-point to integer doubleword converson",
        "packed floating-point to integer word conversion",
        "packed floating-point accumulate",
        "packed floating-point add",
        "packed floating-point compare for equal",
        "packed floating-point compare for greater or equal",
        "packed floating-point compare for greater than",
        "packed floating-point maximum",
        "packed floating-point minimum",
        "packed floating-point multiply",
        "packed floating-point negative accumulate",
        "packed floating-point positive-negative accumulate",
        "packed floating-point reciprocal approximation",
        "packed floating-point reciprocal iteration 1",
        "packed floating-point reciprocal iteration 2",
        "packed floating-point reciprocal square root iteration 1",
        "packed floating-point reciprocal square root approximation",
        "packed floating-point subtract",
        "packed floating-point subtract reverse",
        "packed horizontal add doubleword integer",
        "packed horizontal add signed word integers with signed saturation",
        "packed horizontal add word integers",
        "packed horizontal minimum of unsigned word integers",
        "packed horizontal subtract doubleword integers",
        "packed horizontal subtract signed word integers with signed saturation",
        "packed horizontal subtract word integers",
        "packed integer to floating-point doubleword conversion",
        "packed integer to floating-point word conversion",
        "insert byte",
        "insert doubleword",
        "insert quadword",
        "insert word",
        "multiply and add packed signed and unsigned byte integers",
        "multiply and add packed signed word integers",
        "maximum of packed signed byte integers",
        "maximum of packed signed doubleword integers",
        "maximum of packed signed word integers",
        "maximum of packed unsigned byte integers",
        "maximum of packed unsigned doubleword integers",
        "maximum of packed unsigned word integers",
        "minimum of packed signed byte integers",
        "minimum of packed signed doubleword integers",
        "minimum of packed signed word integers",
        "minimum of packed unsigned byte integers",
        "minimum of packed unsigned doubleword integers",
        "minimum of packed unsigned word integers",
        "move byte mask",
        "move packed byte integers to doubleword integers with sign extension",
        "move packed byte integers to quadword integers with sign extension",
        "move packed byte integers to word integers with sign extension",
        "move packed doubleword integers to quadword integers with sign extension",
        "move packed word integers to doubleword integers with sign extension",
        "move packed word integers to quadword integers with sign extension",
        "move packed byte integers to doubleword integers with zero extension",
        "move packed byte integers to quadword integers with zero extension",
        "move packed byte integers to word integers with zero extension",
        "move packed doubleword integers to quadword integers with zero extension",
        "move packed word integers to doubleword integers with zero extension",
        "move packed word integers to quadword integers with zero extension",
        "multiply packed signed doubleword integers and store quadword result",
        "packed multiply signed word integers and store high result with round and scale",
        "packed multiply high rounded word",
        "multiply packed unsigned word integers and store high result",
        "multiply packed signed word integers and store high result",
        "multiply packed signed doubleword integers and store low result",
        "multiply packed signed word integers and store low result",
        "multiply packed unsigned doubleword integers",
        "pop a value from the stack",
        "count of number of bits set to 1",
        "packed bitwise logical or",
        "prefetch data into caches",
        "prefetch data into caches using nta hint",
        "prefetch data into caches using t0 hint",
        "prefetch data into caches using t1 hint",
        "prefetch data into caches using t2 hint",
        "prefetch data into caches in anticipation of a write",
        "prefetch vector data into caches with intent to write and t1 hint",
        "compute sum of absolute differences",
        "packed shuffle bytes",
        "shuffle packed doublewords",
        "shuffle packed high words",
        "shuffle packed low words",
        "shuffle packed words",
        "packed sign of byte integers",
        "packed sign of doubleword integers",
        "packed sign of word integers",
        "shift packed doubleword data left logical",
        "shift packed double quadword left logical",
        "shift packed quadword data left logical",
        "shift packed word data left logical",
        "shift packed doubleword data right arithmetic",
        "shift packed word data right arithmetic",
        "shift packed doubleword data right logical",
        "shift packed double quadword right logical",
        "shift packed quadword data right logical",
        "shift packed word data right logical",
        "subtract packed byte integers",
        "subtract packed doubleword integers",
        "subtract packed quadword integers",
        "subtract packed signed byte integers with signed saturation",
        "subtract packed signed word integers with signed saturation",
        "subtract packed unsigned byte integers with unsigned saturation",
        "subtract packed unsigned word integers with unsigned saturation",
        "subtract packed word integers",
        "packed swap doubleword",
        "packed logical compare",
        "unpack and interleave high-order bytes into words",
        "unpack and interleave high-order doublewords into quadwords",
        "unpack and interleave high-order quadwords into double quadwords",
        "unpack and interleave high-order words into doublewords",
        "unpack and interleave low-order bytes into words",
        "unpack and interleave low-order doublewords into quadwords",
        "unpack and interleave low-order quadwords into double quadwords",
        "unpack and interleave low-order words into doublewords",
        "push value onto the stack",
        "packed bitwise logical exclusive or",
        "rotate left through carry flag",
        "compute approximate reciprocals of packed single-precision floating-point values",
        "compute approximate reciprocal of scalar single-precision floating-point values",
        "rotate right through carry flag",
        "read random number",
        "read random seed",
        "read time-stamp counter",
        "read time-stamp counter and processor id",
        "return from procedure",
        "rotate left",
        "rotate right",
        "rotate right logical without affecting flags",
        "round packed double precision floating-point values",
        "round packed single precision floating-point values",
        "round scalar double precision floating-point values",
        "round scalar single precision floating-point values",
        "compute reciprocals of square roots of packed single-precision floating-point values",
        "compute reciprocal of square root of scalar single-precision floating-point value",
        "arithmetic shift left",
        "arithmetic shift right",
        "arithmetic shift right without affecting flags",
        "subtract with borrow",
        "set byte if above (cf == 0 and zf == 0)",
        "set byte if above or equal (cf == 0)",
        "set byte if below (cf == 1)",
        "set byte if below or equal (cf == 1 or zf == 1)",
        "set byte if carry (cf == 1)",
        "set byte if equal (zf == 1)",
        "set byte if greater (zf == 0 and sf == of)",
        "set byte if greater or equal (sf == of)",
        "set byte if less (sf != of)",
        "set byte if less or equal (zf == 1 or sf != of)",
        "set byte if not above (cf == 1 or zf == 1)",
        "set byte if not above or equal (cf == 1)",
        "set byte if not below (cf == 0)",
        "set byte if not below or equal (cf == 0 and zf == 0)",
        "set byte if not carry (cf == 0)",
        "set byte if not equal (zf == 0)",
        "set byte if not greater (zf == 1 or sf != of)",
        "set byte if not greater or equal (sf != of)",
        "set byte if not less (sf == of)",
        "set byte if not less or equal (zf == 0 and sf == of)",
        "set byte if not overflow (of == 0)",
        "set byte if not parity (pf == 0)",
        "set byte if not sign (sf == 0)",
        "set byte if not zero (zf == 0)",
        "set byte if overflow (of == 1)",
        "set byte if parity (pf == 1)",
        "set byte if parity even (pf == 1)",
        "set byte if parity odd (pf == 0)",
        "set byte if sign (sf == 1)",
        "set byte if zero (zf == 1)",
        "store fence",
        "perform an intermediate calculation for the next four sha1 message doublewords",
        "perform a final calculation for the next four sha1 message doublewords",
        "calculate sha1 state variable e after four rounds",
        "perform four rounds of sha1 operation",
        "perform an intermediate calculation for the next four sha256 message doublewords",
        "perform a final calculation for the next four sha256 message doublewords",
        "perform two rounds of sha256 operation",
        "logical shift left",
        "integer double precision shift left",
        "logical shift left without affecting flags",
        "logical shift right",
        "integer double precision shift right",
        "logical shift right without affecting flags",
        "shuffle packed double-precision floating-point values",
        "shuffle packed single-precision floating-point values",
        "compute square roots of packed double-precision floating-point values",
        "compute square roots of packed single-precision floating-point values",
        "compute square root of scalar double-precision floating-point value",
        "compute square root of scalar single-precision floating-point value",
        "set carry flag",
        "set direction flag",
        "store mxcsr register state",
        "subtract",
        "subtract packed double-precision floating-point values",
        "subtract packed single-precision floating-point values",
        "subtract scalar double-precision floating-point values",
        "subtract scalar single-precision floating-point values",
        "fast system call",
        "inverse mask from trailing ones",
        "logical compare",
        "count the number of trailing zero bits",
        "mask from trailing zeros",
        "unordered compare scalar double-precision floating-point values and set eflags",
        "unordered compare scalar single-precision floating-point values and set eflags",
        "undefined instruction",
        "unpack and interleave high packed double-precision floating-point values",
        "unpack and interleave high packed single-precision floating-point values",
        "unpack and interleave low packed double-precision floating-point values",
        "unpack and interleave low packed single-precision floating-point values",
        "add packed double-precision floating-point values",
        "add packed single-precision floating-point values",
        "add scalar double-precision floating-point values",
        "add scalar single-precision floating-point values",
        "packed double-fp add/subtract",
        "packed single-fp add/subtract",
        "perform one round of an aes decryption flow",
        "perform last round of an aes decryption flow",
        "perform one round of an aes encryption flow",
        "perform last round of an aes encryption flow",
        "perform the aes invmixcolumn transformation",
        "aes round key generation assist",
        "align doubleword vectors",
        "align quadword vectors",
        "bitwise logical and not of packed double-precision floating-point values",
        "bitwise logical and not of packed single-precision floating-point values",
        "bitwise logical and of packed double-precision floating-point values",
        "bitwise logical and of packed single-precision floating-point values",
        "blend packed double-precision floating-point vectors using an opmask control",
        "blend packed single-precision floating-point vectors using an opmask control",
        "blend packed double precision floating-point values",
        "blend packed single precision floating-point values",
        "variable blend packed double precision floating-point values",
        "variable blend packed single precision floating-point values",
        "broadcast 128 bit of floating-point data",
        "broadcast two single-precision floating-point elements",
        "broadcast four single-precision floating-point elements",
        "broadcast eight single-precision floating-point elements",
        "broadcast two double-precision floating-point elements",
        "broadcast four double-precision floating-point elements",
        "broadcast 128 bits of integer data",
        "broadcast two doubleword elements",
        "broadcast four doubleword elements",
        "broadcast eight doubleword elements",
        "broadcast two quadword elements",
        "broadcast four quadword elements",
        "broadcast double-precision floating-point element",
        "broadcast single-precision floating-point element",
        "compare packed double-precision floating-point values",
        "compare packed single-precision floating-point values",
        "compare scalar double-precision floating-point values",
        "compare scalar single-precision floating-point values",
        "compare scalar ordered double-precision floating-point values and set eflags",
        "compare scalar ordered single-precision floating-point values and set eflags",
        "store sparse packed double-precision floating-point values into dense memory/register",
        "store sparse packed single-precision floating-point values into dense memory/register",
        "convert packed dword integers to packed double-precision fp values",
        "convert packed dword integers to packed single-precision fp values",
        "convert packed double-precision fp values to packed dword integers",
        "convert packed double-precision fp values to packed single-precision fp values",
        "convert packed double-precision floating-point values to packed quadword integers",
        "convert packed double-precision floating-point values to packed unsigned doubleword integers",
        "convert packed double-precision floating-point values to packed unsigned quadword integers",
        "convert half-precision fp values to single-precision fp values",
        "convert packed single-precision fp values to packed dword integers",
        "convert packed single-precision fp values to packed double-precision fp values",
        "convert single-precision fp value to half-precision fp value",
        "convert packed single precision floating-point values to packed singed quadword integer values",
        "convert packed single-precision floating-point values to packed unsigned doubleword integer values",
        "convert packed single precision floating-point values to packed unsigned quadword integer values",
        "convert packed quadword integers to packed double-precision floating-point values",
        "convert packed quadword integers to packed single-precision floating-point values",
        "convert scalar double-precision fp value to integer",
        "convert scalar double-precision fp value to scalar single-precision fp value",
        "convert scalar double-precision floating-point value to unsigned doubleword integer",
        "convert dword integer to scalar double-precision fp value",
        "convert dword integer to scalar single-precision fp value",
        "convert scalar single-precision fp value to scalar double-precision fp value",
        "convert scalar single-precision fp value to dword integer",
        "convert scalar single-precision floating-point value to unsigned doubleword integer",
        "convert with truncation packed double-precision fp values to packed dword integers",
        "convert with truncation packed double-precision floating-point values to packed quadword integers",
        "convert with truncation packed double-precision floating-point values to packed unsigned doubleword integers",
        "convert with truncation packed double-precision floating-point values to packed unsigned quadword integers",
        "convert with truncation packed single-precision fp values to packed dword integers",
        "convert with truncation packed single precision floating-point values to packed singed quadword integer values",
        "convert with truncation packed single-precision floating-point values to packed unsigned doubleword integer values",
        "convert with truncation packed single precision floating-point values to packed unsigned quadword integer values",
        "convert with truncation scalar double-precision fp value to signed integer",
        "convert with truncation scalar double-precision floating-point value to unsigned integer",
        "convert with truncation scalar single-precision fp value to dword integer",
        "convert with truncation scalar single-precision floating-point value to unsigned integer",
        "convert packed unsigned doubleword integers to packed double-precision floating-point values",
        "convert packed unsigned doubleword integers to packed single-precision floating-point values",
        "convert packed unsigned quadword integers to packed double-precision floating-point values",
        "convert packed unsigned quadword integers to packed single-precision floating-point values",
        "convert unsigned integer to scalar double-precision floating-point value",
        "convert unsigned integer to scalar single-precision floating-point value",
        "double block packed sum-absolute-differences on unsigned bytes",
        "divide packed double-precision floating-point values",
        "divide packed single-precision floating-point values",
        "divide scalar double-precision floating-point values",
        "divide scalar single-precision floating-point values",
        "dot product of packed double precision floating-point values",
        "dot product of packed single precision floating-point values",
        "approximation to the exponential 2^x of packed double-precision floating-point values with less than 2^-23 relative error",
        "approximation to the exponential 2^x of packed single-precision floating-point values with less than 2^-23 relative error",
        "load sparse packed double-precision floating-point values from dense memory",
        "load sparse packed single-precision floating-point values from dense memory",
        "extract packed floating-point values",
        "extract 128 bits of packed single-precision floating-point values",
        "extract 256 bits of packed single-precision floating-point values",
        "extract 128 bits of packed double-precision floating-point values",
        "extract 256 bits of packed double-precision floating-point values",
        "extract packed integer values",
        "extract 128 bits of packed doubleword integer values",
        "extract 256 bits of packed doubleword integer values",
        "extract 128 bits of packed quadword integer values",
        "extract 256 bits of packed quadword integer values",
        "extract packed single precision floating-point value",
        "fix up special packed double-precision floating-point values",
        "fix up special packed single-precision floating-point values",
        "fix up special scalar double-precision floating-point value",
        "fix up special scalar single-precision floating-point value",
        "fused multiply-add of packed double-precision floating-point values",
        "fused multiply-add of packed single-precision floating-point values",
        "fused multiply-add of scalar double-precision floating-point values",
        "fused multiply-add of scalar single-precision floating-point values",
        "fused multiply-add of packed double-precision floating-point values",
        "fused multiply-add of packed single-precision floating-point values",
        "fused multiply-add of scalar double-precision floating-point values",
        "fused multiply-add of scalar single-precision floating-point values",
        "fused multiply-add of packed double-precision floating-point values",
        "fused multiply-add of packed single-precision floating-point values",
        "fused multiply-add of scalar double-precision floating-point values",
        "fused multiply-add of scalar single-precision floating-point values",
        "fused multiply-add of packed double-precision floating-point values",
        "fused multiply-add of packed single-precision floating-point values",
        "fused multiply-add of scalar double-precision floating-point values",
        "fused multiply-add of scalar single-precision floating-point values",
        "fused multiply-alternating add/subtract of packed double-precision floating-point values",
        "fused multiply-alternating add/subtract of packed single-precision floating-point values",
        "fused multiply-alternating add/subtract of packed double-precision floating-point values",
        "fused multiply-alternating add/subtract of packed single-precision floating-point values",
        "fused multiply-alternating add/subtract of packed double-precision floating-point values",
        "fused multiply-alternating add/subtract of packed single-precision floating-point values",
        "fused multiply-alternating add/subtract of packed double-precision floating-point values",
        "fused multiply-alternating add/subtract of packed single-precision floating-point values",
        "fused multiply-subtract of packed double-precision floating-point values",
        "fused multiply-subtract of packed single-precision floating-point values",
        "fused multiply-subtract of scalar double-precision floating-point values",
        "fused multiply-subtract of scalar single-precision floating-point values",
        "fused multiply-subtract of packed double-precision floating-point values",
        "fused multiply-subtract of packed single-precision floating-point values",
        "fused multiply-subtract of scalar double-precision floating-point values",
        "fused multiply-subtract of scalar single-precision floating-point values",
        "fused multiply-subtract of packed double-precision floating-point values",
        "fused multiply-subtract of packed single-precision floating-point values",
        "fused multiply-subtract of scalar double-precision floating-point values",
        "fused multiply-subtract of scalar single-precision floating-point values",
        "fused multiply-alternating subtract/add of packed double-precision floating-point values",
        "fused multiply-alternating subtract/add of packed single-precision floating-point values",
        "fused multiply-alternating subtract/add of packed double-precision floating-point values",
        "fused multiply-alternating subtract/add of packed single-precision floating-point values",
        "fused multiply-alternating subtract/add of packed double-precision floating-point values",
        "fused multiply-alternating subtract/add of packed single-precision floating-point values",
        "fused multiply-alternating subtract/add of packed double-precision floating-point values",
        "fused multiply-alternating subtract/add of packed single-precision floating-point values",
        "fused multiply-subtract of packed double-precision floating-point values",
        "fused multiply-subtract of packed single-precision floating-point values",
        "fused multiply-subtract of scalar double-precision floating-point values",
        "fused multiply-subtract of scalar single-precision floating-point values",
        "fused negative multiply-add of packed double-precision floating-point values",
        "fused negative multiply-add of packed single-precision floating-point values",
        "fused negative multiply-add of scalar double-precision floating-point values",
        "fused negative multiply-add of scalar single-precision floating-point values",
        "fused negative multiply-add of packed double-precision floating-point values",
        "fused negative multiply-add of packed single-precision floating-point values",
        "fused negative multiply-add of scalar double-precision floating-point values",
        "fused negative multiply-add of scalar single-precision floating-point values",
        "fused negative multiply-add of packed double-precision floating-point values",
        "fused negative multiply-add of packed single-precision floating-point values",
        "fused negative multiply-add of scalar double-precision floating-point values",
        "fused negative multiply-add of scalar single-precision floating-point values",
        "fused negative multiply-add of packed double-precision floating-point values",
        "fused negative multiply-add of packed single-precision floating-point values",
        "fused negative multiply-add of scalar double-precision floating-point values",
        "fused negative multiply-add of scalar single-precision floating-point values",
        "fused negative multiply-subtract of packed double-precision floating-point values",
        "fused negative multiply-subtract of packed single-precision floating-point values",
        "fused negative multiply-subtract of scalar double-precision floating-point values",
        "fused negative multiply-subtract of scalar single-precision floating-point values",
        "fused negative multiply-subtract of packed double-precision floating-point values",
        "fused negative multiply-subtract of packed single-precision floating-point values",
        "fused negative multiply-subtract of scalar double-precision floating-point values",
        "fused negative multiply-subtract of scalar single-precision floating-point values",
        "fused negative multiply-subtract of packed double-precision floating-point values",
        "fused negative multiply-subtract of packed single-precision floating-point values",
        "fused negative multiply-subtract of scalar double-precision floating-point values",
        "fused negative multiply-subtract of scalar single-precision floating-point values",
        "fused negative multiply-subtract of packed double-precision floating-point values",
        "fused negative multiply-subtract of packed single-precision floating-point values",
        "fused negative multiply-subtract of scalar double-precision floating-point values",
        "fused negative multiply-subtract of scalar single-precision floating-point values",
        "test class of packed double-precision floating-point values",
        "test class of packed single-precision floating-point values",
        "test class of scalar double-precision floating-point value",
        "test class of scalar single-precision floating-point value",
        "extract fraction packed double-precision floating-point",
        "extract fraction packed single-precision floating-point",
        "extract fraction scalar double-precision floating-point",
        "extract fraction scalar single-precision floating point",
        "gather packed double-precision floating-point values using signed doubleword indices",
        "gather packed single-precision floating-point values using signed doubleword indices",
        "sparse prefetch packed double-precision floating-point data values with signed doubleword indices using t0 hint",
        "sparse prefetch packed single-precision floating-point data values with signed doubleword indices using t0 hint",
        "sparse prefetch packed double-precision floating-point data values with signed quadword indices using t0 hint",
        "sparse prefetch packed single-precision floating-point data values with signed quadword indices using t0 hint",
        "sparse prefetch packed double-precision floating-point data values with signed doubleword indices using t1 hint",
        "sparse prefetch packed single-precision floating-point data values with signed doubleword indices using t1 hint",
        "sparse prefetch packed double-precision floating-point data values with signed quadword indices using t1 hint",
        "sparse prefetch packed single-precision floating-point data values with signed quadword indices using t1 hint",
        "gather packed double-precision floating-point values using signed quadword indices",
        "gather packed single-precision floating-point values using signed quadword indices",
        "extract exponents of packed double-precision floating-point values as double-precision floating-point values",
        "extract exponents of packed single-precision floating-point values as single-precision floating-point values",
        "extract exponent of scalar double-precision floating-point value as double-precision floating-point value",
        "extract exponent of scalar single-precision floating-point value as single-precision floating-point value",
        "extract normalized mantissas from packed double-precision floating-point values",
        "extract normalized mantissas from packed single-precision floating-point values",
        "extract normalized mantissa from scalar double-precision floating-point value",
        "extract normalized mantissa from scalar single-precision floating-point value",
        "packed double-fp horizontal add",
        "packed single-fp horizontal add",
        "packed double-fp horizontal subtract",
        "packed single-fp horizontal subtract",
        "insert packed floating-point values",
        "insert 128 bits of packed single-precision floating-point values",
        "insert 256 bits of packed single-precision floating-point values",
        "insert 128 bits of packed double-precision floating-point values",
        "insert 256 bits of packed double-precision floating-point values",
        "insert packed integer values",
        "insert 128 bits of packed doubleword integer values",
        "insert 256 bits of packed doubleword integer values",
        "insert 128 bits of packed quadword integer values",
        "insert 256 bits of packed quadword integer values",
        "insert packed single precision floating-point value",
        "load unaligned integer 128 bits",
        "load mxcsr register",
        "store selected bytes of double quadword",
        "conditional move packed double-precision floating-point values",
        "conditional move packed single-precision floating-point values",
        "return maximum packed double-precision floating-point values",
        "return maximum packed single-precision floating-point values",
        "return maximum scalar double-precision floating-point value",
        "return maximum scalar single-precision floating-point value",
        "return minimum packed double-precision floating-point values",
        "return minimum packed single-precision floating-point values",
        "return minimum scalar double-precision floating-point value",
        "return minimum scalar single-precision floating-point value",
        "move aligned packed double-precision floating-point values",
        "move aligned packed single-precision floating-point values",
        "move doubleword",
        "move one double-fp and duplicate",
        "move aligned double quadword",
        "move aligned doubleword values",
        "move aligned quadword values",
        "move unaligned double quadword",
        "move unaligned word values",
        "move unaligned doubleword values",
        "move unaligned quadword values",
        "move unaligned byte values",
        "move packed single-precision floating-point values high to low",
        "move high packed double-precision floating-point value",
        "move high packed single-precision floating-point values",
        "move packed single-precision floating-point values low to high",
        "move low packed double-precision floating-point value",
        "move low packed single-precision floating-point values",
        "extract packed double-precision floating-point sign mask",
        "extract packed single-precision floating-point sign mask",
        "store double quadword using non-temporal hint",
        "load double quadword non-temporal aligned hint",
        "store packed double-precision floating-point values using non-temporal hint",
        "store packed single-precision floating-point values using non-temporal hint",
        "move quadword",
        "move scalar double-precision floating-point value",
        "move packed single-fp high and duplicate",
        "move packed single-fp low and duplicate",
        "move scalar single-precision floating-point values",
        "move unaligned packed double-precision floating-point values",
        "move unaligned packed single-precision floating-point values",
        "compute multiple packed sums of absolute difference",
        "multiply packed double-precision floating-point values",
        "multiply packed single-precision floating-point values",
        "multiply scalar double-precision floating-point values",
        "multiply scalar single-precision floating-point values",
        "bitwise logical or of double-precision floating-point values",
        "bitwise logical or of single-precision floating-point values",
        "packed absolute value of byte integers",
        "packed absolute value of doubleword integers",
        "packed absolute value of quadword integers",
        "packed absolute value of word integers",
        "pack doublewords into words with signed saturation",
        "pack words into bytes with signed saturation",
        "pack doublewords into words with unsigned saturation",
        "pack words into bytes with unsigned saturation",
        "add packed byte integers",
        "add packed doubleword integers",
        "add packed quadword integers",
        "add packed signed byte integers with signed saturation",
        "add packed signed word integers with signed saturation",
        "add packed unsigned byte integers with unsigned saturation",
        "add packed unsigned word integers with unsigned saturation",
        "add packed word integers",
        "packed align right",
        "packed bitwise logical and",
        "bitwise logical and of packed doubleword integers",
        "packed bitwise logical and not",
        "bitwise logical and not of packed doubleword integers",
        "bitwise logical and not of packed quadword integers",
        "bitwise logical and of packed quadword integers",
        "average packed byte integers",
        "average packed word integers",
        "blend packed doublewords",
        "blend byte vectors using an opmask control",
        "blend doubleword vectors using an opmask control",
        "blend quadword vectors using an opmask control",
        "blend word vectors using an opmask control",
        "variable blend packed bytes",
        "blend packed words",
        "broadcast byte integer",
        "broadcast doubleword integer",
        "broadcast low byte of mask register to packed quadword values",
        "broadcast low word of mask register to packed doubleword values",
        "broadcast quadword integer",
        "broadcast word integer",
        "carry-less quadword multiplication",
        "packed conditional move",
        "compare packed signed byte values",
        "compare packed signed doubleword values",
        "compare packed byte data for equality",
        "compare packed doubleword data for equality",
        "compare packed quadword data for equality",
        "compare packed word data for equality",
        "packed compare explicit length strings, return index",
        "packed compare explicit length strings, return mask",
        "compare packed signed byte integers for greater than",
        "compare packed signed doubleword integers for greater than",
        "compare packed data for greater than",
        "compare packed signed word integers for greater than",
        "packed compare implicit length strings, return index",
        "packed compare implicit length strings, return mask",
        "compare packed signed quadword values",
        "compare packed unsigned byte values",
        "compare packed unsigned doubleword values",
        "compare packed unsigned quadword values",
        "compare packed unsigned word values",
        "compare packed signed word values",
        "compare packed signed byte integers",
        "compare packed signed doubleword integers",
        "store sparse packed doubleword integer values into dense memory/register",
        "store sparse packed quadword integer values into dense memory/register",
        "compare packed signed quadword integers",
        "compare packed unsigned byte integers",
        "compare packed unsigned doubleword integers",
        "compare packed unsigned quadword integers",
        "compare packed unsigned word integers",
        "compare packed signed word integers",
        "detect conflicts within a vector of packed doubleword values into dense memory/register",
        "detect conflicts within a vector of packed quadword values into dense memory/register",
        "permute floating-point values",
        "permute 128-bit integer values",
        "permute byte integers",
        "permute doubleword integers",
        "full permute of bytes from two tables overwriting the index",
        "full permute of doublewords from two tables overwriting the index",
        "full permute of double-precision floating-point values from two tables overwriting the index",
        "full permute of single-precision floating-point values from two tables overwriting the index",
        "full permute of quadwords from two tables overwriting the index",
        "full permute of words from two tables overwriting the index",
        "permute two-source double-precision floating-point vectors",
        "permute two-source single-precision floating-point vectors",
        "permute double-precision floating-point values",
        "permute single-precision floating-point values",
        "permute double-precision floating-point elements",
        "permute single-precision floating-point elements",
        "permute quadword integers",
        "full permute of bytes from two tables overwriting a table",
        "full permute of doublewords from two tables overwriting a table",
        "full permute of double-precision floating-point values from two tables overwriting a table",
        "full permute of single-precision floating-point values from two tables overwriting a table",
        "full permute of quadwords from two tables overwriting a table",
        "full permute of words from two tables overwriting a table",
        "permute word integers",
        "load sparse packed doubleword integer values from dense memory/register",
        "load sparse packed quadword integer values from dense memory/register",
        "extract byte",
        "extract doubleword",
        "extract quadword",
        "extract word",
        "gather packed doubleword values using signed doubleword indices",
        "gather packed quadword values using signed doubleword indices",
        "gather packed doubleword values using signed quadword indices",
        "gather packed quadword values using signed quadword indices",
        "packed horizontal add signed byte to signed doubleword",
        "packed horizontal add signed byte to signed quadword",
        "packed horizontal add signed byte to signed word",
        "packed horizontal add doubleword integer",
        "packed horizontal add signed doubleword to signed quadword",
        "packed horizontal add signed word integers with signed saturation",
        "packed horizontal add unsigned byte to doubleword",
        "packed horizontal add unsigned byte to quadword",
        "packed horizontal add unsigned byte to word",
        "packed horizontal add unsigned doubleword to quadword",
        "packed horizontal add unsigned word to doubleword",
        "packed horizontal add unsigned word to quadword",
        "packed horizontal add word integers",
        "packed horizontal add signed word to signed doubleword",
        "packed horizontal add signed word to signed quadword",
        "packed horizontal minimum of unsigned word integers",
        "packed horizontal subtract signed byte to signed word",
        "packed horizontal subtract doubleword integers",
        "packed horizontal subtract signed doubleword to signed quadword",
        "packed horizontal subtract signed word integers with signed saturation",
        "packed horizontal subtract word integers",
        "packed horizontal subtract signed word to signed doubleword",
        "insert byte",
        "insert doubleword",
        "insert quadword",
        "insert word",
        "count the number of leading zero bits for packed doubleword values",
        "count the number of leading zero bits for packed quadword values",
        "packed multiply accumulate signed doubleword to signed doubleword",
        "packed multiply accumulate signed high doubleword to signed quadword",
        "packed multiply accumulate signed low doubleword to signed quadword",
        "packed multiply accumulate with saturation signed doubleword to signed doubleword",
        "packed multiply accumulate with saturation signed high doubleword to signed quadword",
        "packed multiply accumulate with saturation signed low doubleword to signed quadword",
        "packed multiply accumulate with saturation signed word to signed doubleword",
        "packed multiply accumulate with saturation signed word to signed word",
        "packed multiply accumulate signed word to signed doubleword",
        "packed multiply accumulate signed word to signed word",
        "packed multiply add accumulate with saturation signed word to signed doubleword",
        "packed multiply add accumulate signed word to signed doubleword",
        "packed multiply of unsigned 52-bit unsigned integers and add high 52-bit products to quadword accumulators",
        "packed multiply of unsigned 52-bit integers and add the low 52-bit products to quadword accumulators",
        "multiply and add packed signed and unsigned byte integers",
        "multiply and add packed signed word integers",
        "conditional move packed doubleword integers",
        "conditional move packed quadword integers",
        "maximum of packed signed byte integers",
        "maximum of packed signed doubleword integers",
        "maximum of packed signed quadword integers",
        "maximum of packed signed word integers",
        "maximum of packed unsigned byte integers",
        "maximum of packed unsigned doubleword integers",
        "maximum of packed unsigned quadword integers",
        "maximum of packed unsigned word integers",
        "minimum of packed signed byte integers",
        "minimum of packed signed doubleword integers",
        "minimum of packed signed quadword integers",
        "minimum of packed signed word integers",
        "minimum of packed unsigned byte integers",
        "minimum of packed unsigned doubleword integers",
        "minimum of packed unsigned quadword integers",
        "minimum of packed unsigned word integers",
        "move signs of packed byte integers to mask register",
        "move signs of packed doubleword integers to mask register",
        "down convert packed doubleword values to byte values with truncation",
        "down convert packed doubleword values to word values with truncation",
        "expand bits of mask register to packed byte integers",
        "expand bits of mask register to packed doubleword integers",
        "expand bits of mask register to packed quadword integers",
        "expand bits of mask register to packed word integers",
        "move byte mask",
        "move signs of packed quadword integers to mask register",
        "down convert packed quadword values to byte values with truncation",
        "down convert packed quadword values to doubleword values with truncation",
        "down convert packed quadword values to word values with truncation",
        "down convert packed doubleword values to byte values with signed saturation",
        "down convert packed doubleword values to word values with signed saturation",
        "down convert packed quadword values to byte values with signed saturation",
        "down convert packed quadword values to doubleword values with signed saturation",
        "down convert packed quadword values to word values with signed saturation",
        "down convert packed word values to byte values with signed saturation",
        "move packed byte integers to doubleword integers with sign extension",
        "move packed byte integers to quadword integers with sign extension",
        "move packed byte integers to word integers with sign extension",
        "move packed doubleword integers to quadword integers with sign extension",
        "move packed word integers to doubleword integers with sign extension",
        "move packed word integers to quadword integers with sign extension",
        "down convert packed doubleword values to byte values with unsigned saturation",
        "down convert packed doubleword values to word values with unsigned saturation",
        "down convert packed quadword values to byte values with unsigned saturation",
        "down convert packed quadword values to doubleword values with unsigned saturation",
        "down convert packed quadword values to word values with unsigned saturation",
        "down convert packed word values to byte values with unsigned saturation",
        "move signs of packed word integers to mask register",
        "down convert packed word values to byte values with truncation",
        "move packed byte integers to doubleword integers with zero extension",
        "move packed byte integers to quadword integers with zero extension",
        "move packed byte integers to word integers with zero extension",
        "move packed doubleword integers to quadword integers with zero extension",
        "move packed word integers to doubleword integers with zero extension",
        "move packed word integers to quadword integers with zero extension",
        "multiply packed signed doubleword integers and store quadword result",
        "packed multiply signed word integers and store high result with round and scale",
        "multiply packed unsigned word integers and store high result",
        "multiply packed signed word integers and store high result",
        "multiply packed signed doubleword integers and store low result",
        "multiply packed signed quadword integers and store low result",
        "multiply packed signed word integers and store low result",
        "select packed unaligned bytes from quadword sources",
        "multiply packed unsigned doubleword integers",
        "packed population count for doubleword integers",
        "packed population count for quadword integers",
        "packed bitwise logical or",
        "bitwise logical or of packed doubleword integers",
        "bitwise logical or of packed quadword integers",
        "packed permute bytes",
        "rotate packed doubleword left",
        "rotate packed quadword left",
        "variable rotate packed doubleword left",
        "variable rotate packed quadword left",
        "rotate packed doubleword right",
        "rotate packed quadword right",
        "variable rotate packed doubleword right",
        "variable rotate packed quadword right",
        "packed rotate bytes",
        "packed rotate doublewords",
        "packed rotate quadwords",
        "packed rotate words",
        "compute sum of absolute differences",
        "scatter packed doubleword values with signed doubleword indices",
        "scatter packed quadword values with signed doubleword indices",
        "scatter packed doubleword values with signed quadword indices",
        "scatter packed quadword values with signed quadword indices",
        "packed shift arithmetic bytes",
        "packed shift arithmetic doublewords",
        "packed shift arithmetic quadwords",
        "packed shift arithmetic words",
        "packed shift logical bytes",
        "packed shift logical doublewords",
        "packed shift logical quadwords",
        "packed shift logical words",
        "packed shuffle bytes",
        "shuffle packed doublewords",
        "shuffle packed high words",
        "shuffle packed low words",
        "packed sign of byte integers",
        "packed sign of doubleword integers",
        "packed sign of word integers",
        "shift packed doubleword data left logical",
        "shift packed double quadword left logical",
        "shift packed quadword data left logical",
        "variable shift packed doubleword data left logical",
        "variable shift packed quadword data left logical",
        "variable shift packed word data left logical",
        "shift packed word data left logical",
        "shift packed doubleword data right arithmetic",
        "shift packed quadword data right arithmetic",
        "variable shift packed doubleword data right arithmetic",
        "variable shift packed quadword data right arithmetic",
        "variable shift packed word data right arithmetic",
        "shift packed word data right arithmetic",
        "shift packed doubleword data right logical",
        "shift packed double quadword right logical",
        "shift packed quadword data right logical",
        "variable shift packed doubleword data right logical",
        "variable shift packed quadword data right logical",
        "variable shift packed word data right logical",
        "shift packed word data right logical",
        "subtract packed byte integers",
        "subtract packed doubleword integers",
        "subtract packed quadword integers",
        "subtract packed signed byte integers with signed saturation",
        "subtract packed signed word integers with signed saturation",
        "subtract packed unsigned byte integers with unsigned saturation",
        "subtract packed unsigned word integers with unsigned saturation",
        "subtract packed word integers",
        "bitwise ternary logical operation on doubleword values",
        "bitwise ternary logical operation on quadword values",
        "packed logical compare",
        "logical and of packed byte integer values and set mask",
        "logical and of packed doubleword integer values and set mask",
        "logical and of packed quadword integer values and set mask",
        "logical and of packed word integer values and set mask",
        "logical nand of packed byte integer values and set mask",
        "logical nand of packed doubleword integer values and set mask",
        "logical nand of packed quadword integer values and set mask",
        "logical nand of packed word integer values and set mask",
        "unpack and interleave high-order bytes into words",
        "unpack and interleave high-order doublewords into quadwords",
        "unpack and interleave high-order quadwords into double quadwords",
        "unpack and interleave high-order words into doublewords",
        "unpack and interleave low-order bytes into words",
        "unpack and interleave low-order doublewords into quadwords",
        "unpack and interleave low-order quadwords into double quadwords",
        "unpack and interleave low-order words into doublewords",
        "packed bitwise logical exclusive or",
        "bitwise logical exclusive or of packed doubleword integers",
        "bitwise logical exclusive or of packed quadword integers",
        "range restriction calculation for packed pairs of double-precision floating-point values",
        "range restriction calculation for packed pairs of single-precision floating-point values",
        "range restriction calculation for a pair of scalar double-precision floating-point values",
        "range restriction calculation for a pair of scalar single-precision floating-point values",
        "compute approximate reciprocals of packed double-precision floating-point values",
        "compute approximate reciprocals of packed single-precision floating-point values",
        "compute approximate reciprocal of a scalar double-precision floating-point value",
        "compute approximate reciprocal of a scalar single-precision floating-point value",
        "approximation to the reciprocal of packed double-precision floating-point values with less than 2^-28 relative error",
        "approximation to the reciprocal of packed single-precision floating-point values with less than 2^-28 relative error",
        "approximation to the reciprocal of a scalar double-precision floating-point value with less than 2^-28 relative error",
        "approximation to the reciprocal of a scalar single-precision floating-point value with less than 2^-28 relative error",
        "compute approximate reciprocals of packed single-precision floating-point values",
        "compute approximate reciprocal of scalar single-precision floating-point values",
        "perform reduction transformation on packed double-precision floating-point values",
        "perform reduction transformation on packed single-precision floating-point values",
        "perform reduction transformation on a scalar double-precision floating-point value",
        "perform reduction transformation on a scalar single-precision floating-point value",
        "round packed double-precision floating-point values to include a given number of fraction bits",
        "round packed single-precision floating-point values to include a given number of fraction bits",
        "round scalar double-precision floating-point value to include a given number of fraction bits",
        "round scalar single-precision floating-point value to include a given number of fraction bits",
        "round packed double precision floating-point values",
        "round packed single precision floating-point values",
        "round scalar double precision floating-point values",
        "round scalar single precision floating-point values",
        "compute approximate reciprocals of square roots of packed double-precision floating-point values",
        "compute approximate reciprocals of square roots of packed single-precision floating-point values",
        "compute approximate reciprocal of a square root of a scalar double-precision floating-point value",
        "compute approximate reciprocal of a square root of a scalar single-precision floating-point value",
        "approximation to the reciprocal square root of packed double-precision floating-point values with less than 2^-28 relative error",
        "approximation to the reciprocal square root of packed single-precision floating-point values with less than 2^-28 relative error",
        "approximation to the reciprocal square root of a scalar double-precision floating-point value with less than 2^-28 relative error",
        "approximation to the reciprocal square root of a scalar single-precision floating-point value with less than 2^-28 relative error",
        "compute reciprocals of square roots of packed single-precision floating-point values",
        "compute reciprocal of square root of scalar single-precision floating-point value",
        "scale packed double-precision floating-point values with double-precision floating-point values",
        "scale packed single-precision floating-point values with single-precision floating-point values",
        "scale scalar double-precision floating-point value with a double-precision floating-point value",
        "scale scalar single-precision floating-point value with a single-precision floating-point value",
        "scatter packed double-precision floating-point values with signed doubleword indices",
        "scatter packed single-precision floating-point values with signed doubleword indices",
        "sparse prefetch packed double-precision floating-point data values with signed doubleword indices using t0 hint with intent to write",
        "sparse prefetch packed single-precision floating-point data values with signed doubleword indices using t0 hint with intent to write",
        "sparse prefetch packed double-precision floating-point data values with signed quadword indices using t0 hint with intent to write",
        "sparse prefetch packed single-precision floating-point data values with signed quadword indices using t0 hint with intent to write",
        "sparse prefetch packed double-precision floating-point data values with signed doubleword indices using t1 hint with intent to write",
        "sparse prefetch packed single-precision floating-point data values with signed doubleword indices using t1 hint with intent to write",
        "sparse prefetch packed double-precision floating-point data values with signed quadword indices using t1 hint with intent to write",
        "sparse prefetch packed single-precision floating-point data values with signed quadword indices using t1 hint with intent to write",
        "scatter packed double-precision floating-point values with signed quadword indices",
        "scatter packed single-precision floating-point values with signed quadword indices",
        "shuffle 128-bit packed single-precision floating-point values",
        "shuffle 128-bit packed double-precision floating-point values",
        "shuffle 128-bit packed doubleword integer values",
        "shuffle 128-bit packed quadword integer values",
        "shuffle packed double-precision floating-point values",
        "shuffle packed single-precision floating-point values",
        "compute square roots of packed double-precision floating-point values",
        "compute square roots of packed single-precision floating-point values",
        "compute square root of scalar double-precision floating-point value",
        "compute square root of scalar single-precision floating-point value",
        "store mxcsr register state",
        "subtract packed double-precision floating-point values",
        "subtract packed single-precision floating-point values",
        "subtract scalar double-precision floating-point values",
        "subtract scalar single-precision floating-point values",
        "packed double-precision floating-point bit test",
        "packed single-precision floating-point bit test",
        "unordered compare scalar double-precision floating-point values and set eflags",
        "unordered compare scalar single-precision floating-point values and set eflags",
        "unpack and interleave high packed double-precision floating-point values",
        "unpack and interleave high packed single-precision floating-point values",
        "unpack and interleave low packed double-precision floating-point values",
        "unpack and interleave low packed single-precision floating-point values",
        "bitwise logical xor for double-precision floating-point values",
        "bitwise logical xor for single-precision floating-point values",
        "zero all ymm registers",
        "zero upper bits of ymm registers",
        "exchange and add",
        "exchange register/memory with register",
        "get value of extended control register",
        "table look-up translation",
        "logical exclusive or",
        "bitwise logical xor for double-precision floating-point values",
        "bitwise logical xor for single-precision floating-point values"
	};
}

compilation_unit = _{
    SOI ~ module_def ~ (function_def | NEWLINE | SEPARATOR)* ~ EOI
}

module_def = {
    "module " ~ qualified_name ~ NEWLINE
}

function_def = {
    "fun " ~ ident ~ sep ~ "(" ~ parameter_list? ~ ")" ~ (" " ~ qualified_name)? ~ sep ~ "{" ~ block ~ "}"
}

block = {
     statement*
}

statement = {
    local_variable |
    NEWLINE |
    SEPARATOR
}

local_variable = {
    "let " ~ ident ~ (" " ~ qualified_name)? ~ sep ~ "=" ~ sep ~ expression ~ NEWLINE
}

parameter_list = {
    (parameter ~ ("," ~ sep ~ parameter)*)
}

parameter = {
    ident ~ " " ~ qualified_name
}

expression = {
    literal
}

literal = {
    float_literal |
    int_literal |
    bool_literal |
    char_literal |
    string_literal
}

float_literal = @{
    ("+" | "-")? ~ (("_"? ~ ASCII_DIGIT)+ ~ "." ~ ("_"? ~ ASCII_DIGIT)+)
}

int_literal = @{
    ("+" | "-")? ~ ("_"? ~ ASCII_DIGIT+)
}

bool_literal = @{
    "true" | "false"
}

char_literal = @{
    "'" ~ char ~ "'"
}

string_literal = @{
    "\"" ~ string_inner ~ "\""
}

sep = _{
    ((NEWLINE | SEPARATOR)+)?
}

qualified_name = {
    ident  ~ ("." ~ ident)*
}

ident = {
    ASCII_ALPHA ~ ASCII_ALPHANUMERIC*
}

string_inner = @{ char* }

char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

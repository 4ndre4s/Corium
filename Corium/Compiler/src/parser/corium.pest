CompilationUnit = _{
    SOI ~ Module ~ GlobalStatement* ~ EOI
}

GlobalStatement = {
    Function |
    NativeFunction |
    StatementSeparator
}

Module = {
    "module " ~ QualifiedName ~ NEWLINE
}

Function = {
     FunctionSignature ~ " {" ~ NEWLINE ~ Block ~ "}" ~ NEWLINE
}

NativeFunction = {
    "native " ~ FunctionSignature ~ NEWLINE
}

FunctionSignature = {
    "fun " ~ Ident ~ "(" ~ ParameterList? ~ ")" ~ (" " ~ QualifiedName)?
}

Block = {
     FunctionStatement*
}

FunctionStatement = {
    LocalVariable |
    ReturnStatement |
    StatementSeparator
}

StatementSeparator = _{
    NEWLINE |
    SEPARATOR
}

LocalVariable = {
    "let " ~ Ident ~ (" " ~ QualifiedName)? ~ " = " ~ Expression ~ NEWLINE
}

ReturnStatement = {
    "return" ~ (" " ~ Expression)? ~ NEWLINE
}

ParameterList = {
    (Parameter ~ (", " ~ Parameter)*)
}

Parameter = {
    Ident ~ " " ~ QualifiedName ~ (" = " ~ Expression)?
}

Expression = {
    Literal
}

Literal = {
    FloatLiteral |
    IntLiteral |
    BoolLiteral |
    CharLiteral |
    StringLiteral
}

FloatLiteral = @{
    ("+" | "-")? ~ (("_"? ~ ASCII_DIGIT)+ ~ "." ~ ("_"? ~ ASCII_DIGIT)+)
}

IntLiteral = @{
    ("+" | "-")? ~ (("_"? ~ ASCII_DIGIT)+)
}

BoolLiteral = @{
    "true" | "false"
}

CharLiteral = @{
    "'" ~ Char ~ "'"
}

StringLiteral = @{
    "\"" ~ Char* ~ "\""
}

QualifiedName = {
    Ident ~ ("." ~ Ident)*
}

Ident = @{
    ASCII_ALPHA ~ ASCII_ALPHANUMERIC*
}

Char = @{
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "v")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{8})
}

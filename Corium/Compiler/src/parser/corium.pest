CompilationUnit = _{
    SOI ~ ModuleDef ~ (FunctionDef | NEWLINE | SEPARATOR)* ~ EOI
}

ModuleDef = {
    "module " ~ QualifiedName ~ NEWLINE
}

FunctionDef = {
    "fun " ~ Ident ~ Sep ~ "(" ~ ParameterList? ~ ")" ~ (" " ~ QualifiedName)? ~ Sep ~ "{" ~ Block ~ "}"
}

Block = {
     Statement*
}

Statement = {
    LocalVariable |
    ReturnStatement |
    StatementSeparator
}

StatementSeparator = _{
    NEWLINE |
    SEPARATOR
}

LocalVariable = {
    "let " ~ Ident ~ (" " ~ QualifiedName)? ~ Sep ~ "=" ~ Sep ~ Expression ~ NEWLINE
}

ReturnStatement = {
    "return" ~ (" " ~ Expression)? ~ NEWLINE
}

ParameterList = {
    (Parameter ~ ("," ~ Sep ~ Parameter)*)
}

Parameter = {
    Ident ~ " " ~ QualifiedName
}

Expression = {
    Literal
}

Literal = {
    FloatLiteral |
    IntLiteral |
    BoolLiteral |
    CharLiteral |
    StringLiteral
}

FloatLiteral = @{
    ("+" | "-")? ~ (("_"? ~ ASCII_DIGIT)+ ~ "." ~ ("_"? ~ ASCII_DIGIT)+)
}

IntLiteral = @{
    ("+" | "-")? ~ ("_"? ~ ASCII_DIGIT+)
}

BoolLiteral = @{
    "true" | "false"
}

CharLiteral = @{
    "'" ~ Char ~ "'"
}

StringLiteral = @{
    "\"" ~ Char* ~ "\""
}

Sep = _{
    ((NEWLINE | SEPARATOR)+)?
}

QualifiedName = {
    Ident ~ ("." ~ Ident)*
}

Ident = @{
    ASCII_ALPHA ~ ASCII_ALPHANUMERIC*
}

Char = @{
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "v")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{8})
}

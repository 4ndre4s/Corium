
use crate::ast::{Expr, Opcode};
use crate::literal::*;

grammar;

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Operation(<>)),
    Factor,
};

pub ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

pub Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Operation(<>)),
    Term,
};

pub FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

pub Term: Box<Expr> = {
    Int => Box::new(Expr::Immediate(<>)),
    "(" <Expr> ")"
};

pub Int: i64 = {
    r"-?[0-9_]+" => parse_int_literal_dec(<>),
    r"-?0[x][0-9a-fA-F_]+" => parse_int_literal_hex(<>),
    r"-?0[b][0-1_]+" => parse_int_literal_bin(<>),
    r"-?0[o][0-7_]+" => parse_int_literal_oct(<>)
};